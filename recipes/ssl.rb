#
# Cookbook Name:: jetty
# Recipe:: ssl
#
# Copyright 2010, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# parameters: ssl_port (int), ssl_subject (string) & ssl_pass (string, optional, randomly generated by default)

include_recipe "openssl"
include_recipe "jetty"

if node['jetty']['ssl_port'] and node['jetty']['ssl_subject']
  conf_dir = "#{node[:jetty][:home]}/etc"
  jetty_major = node[:jetty][:version][/^[^\.]*/]
  jetty_home = node["jetty"]["home"]
  ssl_subject = node['jetty']['ssl_subject']
  prefix = "#{conf_dir}/ssl"
  pass = node[:jetty][:ssl_pass]

  execute "jetty-load-key" do
    command "rm -f #{conf_dir}/keystore; keytool -importkeystore -srckeystore #{prefix}.pkcs12 -srcstoretype PKCS12 -destkeystore #{conf_dir}/keystore -srcstorepass '#{pass}' -deststorepass '#{pass}'"
    cwd conf_dir
    user node['jetty']['user']
    group node['jetty']['group']
    not_if { not ::File.exists?("#{prefix}.pkcs12") }
    action :nothing
    notifies :restart, "service[jetty]", :delayed
  end

  execute "jetty-pkcs12" do
    command "openssl pkcs12 -inkey #{prefix}.key -in #{prefix}.crt -export -out #{prefix}.pkcs12 -passout 'pass:#{pass}'  -passin 'pass:#{pass}'"
    cwd conf_dir
    user node['jetty']['user']
    group node['jetty']['group']
    not_if { ::File.exists?("#{prefix}.pkcs12") or not ::File.exists?("#{prefix}.crt") }
    action :nothing
    notifies :run, "execute[jetty-load-key]", :immediately
  end

  execute "jetty-csr" do
    command "openssl req -new -key #{prefix}.key -out #{prefix}.csr -subj '#{ssl_subject}' -multivalue-rdn -passin 'pass:#{pass}' -passout 'pass:#{pass}'"
    cwd conf_dir
    user node['jetty']['user']
    group node['jetty']['group']
    not_if { ::File.exists?("#{prefix}.csr") or not ::File.exists?("#{prefix}.key") }
    action :nothing
    notifies :run, "execute[jetty-pkcs12]", :immediately
  end

  execute "jetty-cert" do
    command "openssl req -new -x509 -key #{prefix}.key -out #{prefix}.crt -subj '#{ssl_subject}' -multivalue-rdn  -passin 'pass:#{pass}' -passout 'pass:#{pass}'"
    cwd conf_dir
    user node['jetty']['user']
    group node['jetty']['group']
    not_if { ::File.exists?("#{prefix}.crt") or not ::File.exists?("#{prefix}.key") }
    action :nothing
    notifies :run, "execute[jetty-csr]", :immediately
  end

  execute "jetty-key" do
    command "openssl genrsa -out #{prefix}.key -des3 -passout 'pass:#{pass}'"
    cwd conf_dir
    user node['jetty']['user']
    group node['jetty']['group']
    not_if { ::File.exists?("#{prefix}.key") }
    notifies :run, "execute[jetty-cert]", :immediately
    action :run
  end
end
